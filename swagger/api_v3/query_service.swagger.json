{
  "swagger": "2.0",
  "info": {
    "title": "api_v3/query_service.proto",
    "version": "version not set"
  },
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/v3/operations": {
      "get": {
        "summary": "GetOperations returns operation names.",
        "operationId": "QueryService_GetOperations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_v3GetOperationsResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "service",
            "description": "Required service name.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "span_kind",
            "description": "Optional span kind.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/api/v3/services": {
      "get": {
        "summary": "GetServices returns service names.",
        "operationId": "QueryService_GetServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/api_v3GetServicesResponse"
            }
          }
        },
        "tags": [
          "QueryService"
        ]
      }
    },
    "/api/v3/traces": {
      "get": {
        "summary": "FindTraces searches for traces.\nSee GetTrace for JSON unmarshalling.",
        "operationId": "QueryService_FindTraces",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/api_v3SpansResponseChunk"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of api_v3SpansResponseChunk"
            }
          }
        },
        "parameters": [
          {
            "name": "query.service_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.operation_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.start_time_min",
            "description": "Span min start time in. REST API uses RFC-3339ns format. Required.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "query.start_time_max",
            "description": "Span max start time. REST API uses RFC-3339ns format. Required.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "query.duration_min",
            "description": "Span min duration. REST API uses Golang's time format e.g. 10s.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.duration_max",
            "description": "Span max duration. REST API uses Golang's time format e.g. 10s.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query.num_traces",
            "description": "Maximum number of traces in the response.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    },
    "/api/v3/traces/{trace_id}": {
      "get": {
        "summary": "GetTrace returns a single trace.\nNote that the JSON response over HTTP is wrapped into result envelope \"{\"result\": ...}\"\nIt means that the JSON response cannot be directly unmarshalled using JSONPb.\nThis can be fixed by first parsing into user-defined envelope with standard JSON library\nor string manipulation to remove the envelope. Alternatively generate objects using OpenAPI.",
        "operationId": "QueryService_GetTrace",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "properties": {
                "result": {
                  "$ref": "#/definitions/api_v3SpansResponseChunk"
                },
                "error": {
                  "$ref": "#/definitions/runtimeStreamError"
                }
              },
              "title": "Stream result of api_v3SpansResponseChunk"
            }
          }
        },
        "parameters": [
          {
            "name": "trace_id",
            "description": "Hex encoded 64 or 128 bit trace ID.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "QueryService"
        ]
      }
    }
  },
  "definitions": {
    "SpanEvent": {
      "type": "object",
      "properties": {
        "time_unix_nano": {
          "type": "string",
          "format": "uint64",
          "description": "time_unix_nano is the time the event occurred."
        },
        "name": {
          "type": "string",
          "description": "name of the event.\nThis field is semantically required to be set to non-empty string."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "attributes is a collection of attribute key/value pairs on the event.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "dropped_attributes_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped."
        }
      },
      "description": "Event is a time-stamped annotation of the span, consisting of user-supplied\ntext description and key-value pairs."
    },
    "SpanLink": {
      "type": "object",
      "properties": {
        "trace_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier of a trace that this linked span is part of. The ID is a\n16-byte array."
        },
        "span_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for the linked span. The ID is an 8-byte array."
        },
        "trace_state": {
          "type": "string",
          "description": "The trace_state associated with the link."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "attributes is a collection of attribute key/value pairs on the link.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "dropped_attributes_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0,\nthen no attributes were dropped."
        }
      },
      "description": "A pointer from the current span to another span in the same trace or in a\ndifferent trace. For example, this can be used in batching operations,\nwhere a single batch handler processes multiple requests from different\ntraces or when the handler receives a request from a different project."
    },
    "SpanSpanKind": {
      "type": "string",
      "enum": [
        "SPAN_KIND_UNSPECIFIED",
        "SPAN_KIND_INTERNAL",
        "SPAN_KIND_SERVER",
        "SPAN_KIND_CLIENT",
        "SPAN_KIND_PRODUCER",
        "SPAN_KIND_CONSUMER"
      ],
      "default": "SPAN_KIND_UNSPECIFIED",
      "description": "SpanKind is the type of span. Can be used to specify additional relationships between spans\nin addition to a parent/child relationship.\n\n - SPAN_KIND_UNSPECIFIED: Unspecified. Do NOT use as default.\nImplementations MAY assume SpanKind to be INTERNAL when receiving UNSPECIFIED.\n - SPAN_KIND_INTERNAL: Indicates that the span represents an internal operation within an application,\nas opposed to an operation happening at the boundaries. Default value.\n - SPAN_KIND_SERVER: Indicates that the span covers server-side handling of an RPC or other\nremote network request.\n - SPAN_KIND_CLIENT: Indicates that the span describes a request to some remote service.\n - SPAN_KIND_PRODUCER: Indicates that the span describes a producer sending a message to a broker.\nUnlike CLIENT and SERVER, there is often no direct critical path latency relationship\nbetween producer and consumer spans. A PRODUCER span ends when the message was accepted\nby the broker while the logical processing of the message might span a much longer time.\n - SPAN_KIND_CONSUMER: Indicates that the span describes consumer receiving a message from a broker.\nLike the PRODUCER kind, there is often no direct critical path latency relationship\nbetween producer and consumer spans."
    },
    "StatusStatusCode": {
      "type": "string",
      "enum": [
        "STATUS_CODE_UNSET",
        "STATUS_CODE_OK",
        "STATUS_CODE_ERROR"
      ],
      "default": "STATUS_CODE_UNSET",
      "description": "- STATUS_CODE_UNSET: The default status.\n - STATUS_CODE_OK: The Span has been validated by an Application developers or Operator to have\ncompleted successfully.\n - STATUS_CODE_ERROR: The Span contains an error.",
      "title": "For the semantics of status codes see\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status"
    },
    "api_v3GetOperationsResponse": {
      "type": "object",
      "properties": {
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/api_v3Operation"
          }
        }
      },
      "description": "Response object to get operation names."
    },
    "api_v3GetServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "description": "Response object to get service names."
    },
    "api_v3Operation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "span_kind": {
          "type": "string"
        }
      },
      "description": "Operation encapsulates information about operation."
    },
    "api_v3SpansResponseChunk": {
      "type": "object",
      "properties": {
        "resource_spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ResourceSpans"
          },
          "title": "A list of OpenTelemetry ResourceSpans.\nIn case of JSON format the ids (trace_id, span_id, parent_id) are encoded in base64 even though OpenTelemetry specification\nmandates to use hex encoding [2].\nBase64 is chosen to keep compatibility with JSONPb codec.\n[1]: https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto\n[2]: https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp"
        }
      },
      "description": "Response object with spans."
    },
    "api_v3TraceQueryParameters": {
      "type": "object",
      "properties": {
        "service_name": {
          "type": "string"
        },
        "operation_name": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes are matched against Span and Resource attributes.\nAt least one span in a trace must match all specified attributes."
        },
        "start_time_min": {
          "type": "string",
          "format": "date-time",
          "description": "Span min start time in. REST API uses RFC-3339ns format. Required."
        },
        "start_time_max": {
          "type": "string",
          "format": "date-time",
          "description": "Span max start time. REST API uses RFC-3339ns format. Required."
        },
        "duration_min": {
          "type": "string",
          "description": "Span min duration. REST API uses Golang's time format e.g. 10s."
        },
        "duration_max": {
          "type": "string",
          "description": "Span max duration. REST API uses Golang's time format e.g. 10s."
        },
        "num_traces": {
          "type": "integer",
          "format": "int32",
          "description": "Maximum number of traces in the response."
        }
      },
      "description": "Query parameters to find traces.\nNote that some storage implementations do not guarantee the correct implementation of all parameters."
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpc_code": {
          "type": "integer",
          "format": "int32"
        },
        "http_code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "http_status": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1AnyValue": {
      "type": "object",
      "properties": {
        "string_value": {
          "type": "string"
        },
        "bool_value": {
          "type": "boolean"
        },
        "int_value": {
          "type": "string",
          "format": "int64"
        },
        "double_value": {
          "type": "number",
          "format": "double"
        },
        "array_value": {
          "$ref": "#/definitions/v1ArrayValue"
        },
        "kvlist_value": {
          "$ref": "#/definitions/v1KeyValueList"
        },
        "bytes_value": {
          "type": "string",
          "format": "byte"
        }
      },
      "description": "AnyValue is used to represent any type of attribute value. AnyValue may contain a\nprimitive value such as a string or integer or it may contain an arbitrary nested\nobject containing arrays, key-value lists and primitives."
    },
    "v1ArrayValue": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AnyValue"
          },
          "description": "Array of values. The array may be empty (contain 0 elements)."
        }
      },
      "description": "ArrayValue is a list of AnyValue messages. We need ArrayValue as a message\nsince oneof in AnyValue does not allow repeated fields."
    },
    "v1InstrumentationLibrary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "An empty instrumentation library name means the name is unknown."
        },
        "version": {
          "type": "string"
        }
      },
      "description": "InstrumentationLibrary is a message representing the instrumentation library information\nsuch as the fully qualified name and version."
    },
    "v1InstrumentationLibrarySpans": {
      "type": "object",
      "properties": {
        "instrumentation_library": {
          "$ref": "#/definitions/v1InstrumentationLibrary",
          "description": "The instrumentation library information for the spans in this message.\nSemantically when InstrumentationLibrary isn't set, it is equivalent with\nan empty instrumentation library name (unknown)."
        },
        "spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1Span"
          },
          "description": "A list of Spans that originate from an instrumentation library."
        },
        "schema_url": {
          "type": "string",
          "description": "This schema_url applies to all spans and span events in the \"spans\" field."
        }
      },
      "description": "A collection of Spans produced by an InstrumentationLibrary."
    },
    "v1KeyValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/v1AnyValue"
        }
      },
      "description": "KeyValue is a key-value pair that is used to store Span attributes, Link\nattributes, etc."
    },
    "v1KeyValueList": {
      "type": "object",
      "properties": {
        "values": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "A collection of key/value pairs of key-value pairs. The list may be empty (may\ncontain 0 elements).\nThe keys MUST be unique (it is not allowed to have more than one\nvalue with the same key)."
        }
      },
      "description": "KeyValueList is a list of KeyValue messages. We need KeyValueList as a message\nsince `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need\na list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to\navoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches\nare semantically equivalent."
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "Set of attributes that describe the resource.\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key)."
        },
        "dropped_attributes_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of dropped attributes. If the value is 0, then\nno attributes were dropped."
        }
      },
      "description": "Resource information."
    },
    "v1ResourceSpans": {
      "type": "object",
      "properties": {
        "resource": {
          "$ref": "#/definitions/v1Resource",
          "description": "The resource for the spans in this message.\nIf this field is not set then no resource info is known."
        },
        "instrumentation_library_spans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1InstrumentationLibrarySpans"
          },
          "description": "A list of InstrumentationLibrarySpans that originate from a resource."
        },
        "schema_url": {
          "type": "string",
          "description": "This schema_url applies to the data in the \"resource\" field. It does not apply\nto the data in the \"instrumentation_library_spans\" field which have their own\nschema_url field."
        }
      },
      "description": "A collection of InstrumentationLibrarySpans from a Resource."
    },
    "v1Span": {
      "type": "object",
      "properties": {
        "trace_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a trace. All spans from the same trace share\nthe same `trace_id`. The ID is a 16-byte array. An ID with all zeroes\nis considered invalid.\n\nThis field is semantically required. Receiver should generate new\nrandom trace_id if empty or invalid trace_id was received.\n\nThis field is required."
        },
        "span_id": {
          "type": "string",
          "format": "byte",
          "description": "A unique identifier for a span within a trace, assigned when the span\nis created. The ID is an 8-byte array. An ID with all zeroes is considered\ninvalid.\n\nThis field is semantically required. Receiver should generate new\nrandom span_id if empty or invalid span_id was received.\n\nThis field is required."
        },
        "trace_state": {
          "type": "string",
          "description": "trace_state conveys information about request position in multiple distributed tracing graphs.\nIt is a trace_state in w3c-trace-context format: https://www.w3.org/TR/trace-context/#tracestate-header\nSee also https://github.com/w3c/distributed-tracing for more details about this field."
        },
        "parent_span_id": {
          "type": "string",
          "format": "byte",
          "description": "The `span_id` of this span's parent span. If this is a root span, then this\nfield must be empty. The ID is an 8-byte array."
        },
        "name": {
          "type": "string",
          "description": "A description of the span's operation.\n\nFor example, the name can be a qualified method name or a file name\nand a line number where the operation is called. A best practice is to use\nthe same display name at the same call point in an application.\nThis makes it easier to correlate spans in different traces.\n\nThis field is semantically required to be set to non-empty string.\nEmpty value is equivalent to an unknown span name.\n\nThis field is required."
        },
        "kind": {
          "$ref": "#/definitions/SpanSpanKind",
          "description": "Distinguishes between spans generated in a particular context. For example,\ntwo spans with the same name may be distinguished using `CLIENT` (caller)\nand `SERVER` (callee) to identify queueing latency associated with the span."
        },
        "start_time_unix_nano": {
          "type": "string",
          "format": "uint64",
          "description": "start_time_unix_nano is the start time of the span. On the client side, this is the time\nkept by the local machine where the span execution starts. On the server side, this\nis the time when the server's application handler starts running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time."
        },
        "end_time_unix_nano": {
          "type": "string",
          "format": "uint64",
          "description": "end_time_unix_nano is the end time of the span. On the client side, this is the time\nkept by the local machine where the span execution ends. On the server side, this\nis the time when the server application handler stops running.\nValue is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.\n\nThis field is semantically required and it is expected that end_time \u003e= start_time."
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1KeyValue"
          },
          "description": "\"/http/user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36\"\n    \"/http/server_latency\": 300\n    \"abc.com/myattribute\": true\n    \"abc.com/score\": 10.239\n\nThe OpenTelemetry API specification further restricts the allowed value types:\nhttps://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes\nAttribute keys MUST be unique (it is not allowed to have more than one\nattribute with the same key).",
          "title": "attributes is a collection of key/value pairs. Note, global attributes\nlike server name can be set using the resource API. Examples of attributes:"
        },
        "dropped_attributes_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_attributes_count is the number of attributes that were discarded. Attributes\ncan be discarded because their keys are too long or because there are too many\nattributes. If this value is 0, then no attributes were dropped."
        },
        "events": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanEvent"
          },
          "description": "events is a collection of Event items."
        },
        "dropped_events_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_events_count is the number of dropped events. If the value is 0, then no\nevents were dropped."
        },
        "links": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SpanLink"
          },
          "description": "links is a collection of Links, which are references from this span to a span\nin the same or different trace."
        },
        "dropped_links_count": {
          "type": "integer",
          "format": "int64",
          "description": "dropped_links_count is the number of dropped links after the maximum size was\nenforced. If this value is 0, then no links were dropped."
        },
        "status": {
          "$ref": "#/definitions/v1Status",
          "description": "An optional final status for this span. Semantically when Status isn't set, it means\nspan's status code is unset, i.e. assume STATUS_CODE_UNSET (code = 0)."
        }
      },
      "description": "Span represents a single operation within a trace. Spans can be\nnested to form a trace tree. Spans may also be linked to other spans\nfrom the same or different trace and form graphs. Often, a trace\ncontains a root span that describes the end-to-end latency, and one\nor more subspans for its sub-operations. A trace can also contain\nmultiple root spans, or none at all. Spans do not need to be\ncontiguous - there may be gaps or overlaps between spans in a trace.\n\nThe next available field id is 17."
    },
    "v1Status": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "description": "A developer-facing human readable error message."
        },
        "code": {
          "$ref": "#/definitions/StatusStatusCode",
          "description": "The status code."
        }
      },
      "description": "The Status type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs."
    }
  }
}
