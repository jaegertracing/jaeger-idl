// Copyright (c) 2021 The Jaeger Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package jaeger.api_v3;

import "opentelemetry/proto/trace/v1/trace.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

option go_package = "api_v3";
option java_package = "io.jaegertracing.api_v3";

// Request object to get a trace.
message GetTraceRequest {
  // Hex encoded 128 bit trace_id
  string trace_id = 1;
}

// A single response chunk holds spans from a single trace.
// Note that a subsequent request to get a trace might return a different result
// because spans are reported in asynchronous chunks.
message SpansResponseChunk {
  // OTLP resource spans
  // see https://github.com/open-telemetry/opentelemetry-proto/blob/main/opentelemetry/proto/trace/v1/trace.proto
  // In case of JSON format the ids (trace_id, span_id, parent_id) are encoded in base64 even though OpenTelemetry specification
  // mandates to use hex encoding (https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/otlp.md#otlphttp).
  // Base64 is chosen to keep compatibility with JSONPb codec.
  repeated opentelemetry.proto.trace.v1.ResourceSpans resource_spans = 1;
}

// Query parameters to find traces.
message TraceQueryParameters {
  string service_name = 1;
  string operation_name = 2;
  // Attributes are matched against Span and Resource attributes.
  // At least one span in a trace must match all specified attributes.
  map<string, string> attributes = 3;
  google.protobuf.Timestamp start_time_min = 4;
  google.protobuf.Timestamp start_time_max = 5;
  // Minimal duration of a span.
  google.protobuf.Duration duration_min = 6;
  // Maximal duration of a span.
  google.protobuf.Duration duration_max = 7;
  // Maximum number of traces in the response.
  // Note that some storages (e.g. Cassandra) does not guarantee this parameter.
  int32 num_traces = 8;
}

// Request object to search traces.
message FindTracesRequest {
  TraceQueryParameters query = 1;
}

// Request object to get service names.
message GetServicesRequest {}

// Response object to get service names.
message GetServicesResponse {
  repeated string services = 1;
}

// Request object to search for operation names.
message GetOperationsRequest {
  // Required service name.
  string service = 1;
  // Optional span kind.
  string span_kind = 2;
}

// Operation encapsulates information about operation.
message Operation {
  string name = 1;
  string span_kind = 2;
}

// Response object to get operation names.
message GetOperationsResponse {
  repeated Operation operations = 1;
}

service QueryService {
  // GetTraces returns single trace.
  // Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
  // and so the response cannot be directly unmarshalled. This can be fixed by standard JSON
  // parsing libraries or string manipulation to remove the envelope.
  rpc GetTrace(GetTraceRequest) returns (stream SpansResponseChunk) {}

  // GetTraces searches for traces.
  // Note that the JSON response over HTTP is wrapped into result envelope "{"result": ...}"
  // and so the response cannot be directly unmarshalled. This can be fixed by standard JSON
  // parsing libraries or string manipulation to remove the envelope.
  rpc GetTraces(FindTracesRequest) returns (stream SpansResponseChunk) {}

  // GetServices returns service names.
  rpc GetServices(GetServicesRequest) returns (GetServicesResponse) {}

  // GetOperations returns operation names.
  rpc GetOperations(GetOperationsRequest) returns (GetOperationsResponse) {}
}
