// Copyright (c) 2019 The Jaeger Authors.
// Copyright (c) 2018 Uber Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax="proto3";

package jaeger.api_v2;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "api_v2";
option java_package = "io.jaegertracing.api_v2";

// Enable gogoprotobuf extensions (https://github.com/gogo/protobuf/blob/master/extensions.md).
// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;

enum SamplingStrategyType {
  PROBABILISTIC = 0;
  RATE_LIMITING = 1;
};

// ProbabilisticSamplingStrategy defines TraceIdRatioBased sampler configuration.
message ProbabilisticSamplingStrategy {
  // // Sampling rate between [0-1].
  double samplingRate = 1;
}

// RateLimitingSamplingStrategy defines RateLimiting sampling configuration.
message RateLimitingSamplingStrategy {
  // Traces per second.
  int32 maxTracesPerSecond = 1;
}

// OperationSamplingStrategy defines sampling configuration for a given operation/span name.
message OperationSamplingStrategy {
  // Operation name is a span name.
  string operation = 1;
  // Probabilistic sampler configuration.
  ProbabilisticSamplingStrategy probabilisticSampling = 2;
}

// PerOperationSamplingStrategies defines sampling configuration for operations/span (names).
message PerOperationSamplingStrategies {
  // Default sampling probability for TraceIdRatioBased sampler.
  double defaultSamplingProbability = 1;
  // Default lower bound for RateLimiting sampler.
  double defaultLowerBoundTracesPerSecond = 2;
  // Per operation/span (name) sampling configuration.
  repeated OperationSamplingStrategy perOperationStrategies = 3;
  // Default upper bound for rate limiting sampler.
  double defaultUpperBoundTracesPerSecond = 4;
}

// SamplingStrategyResponse defines sampling configuration for a service.
message SamplingStrategyResponse {
  SamplingStrategyType strategyType = 1;
  ProbabilisticSamplingStrategy probabilisticSampling = 2;
  RateLimitingSamplingStrategy rateLimitingSampling = 3;
  PerOperationSamplingStrategies operationSampling =4;
}

// SamplingStrategyParameters defines request parameters for remote sampler.
message SamplingStrategyParameters {
  // Service name.
  string serviceName = 1;
}

// SamplingManager defines service for the remote sampler.
service SamplingManager {
  rpc GetSamplingStrategy(SamplingStrategyParameters) returns (SamplingStrategyResponse) {
    option (google.api.http) = {
            post: "/api/v2/samplingStrategy"
            body: "*"
        };
  }
}
